{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\n// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n//     }) };\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n// export default App;\nimport { useState } from 'react';\nimport Feedback from './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App(options) {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [prevState, setPrevState] = useState(0);\n\n  const totalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const changePoint = e => {\n    setPrevState(prevState => {\n      const currentName = e.target.name;\n      return {\n        [currentName]: prevState[currentName] + 1\n      };\n    });\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = totalFeedback();\n    return Math.round(good * 100 / total);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(Feedback, {\n        options: options,\n        onLeaveFeedback: changePoint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: !!totalFeedback && /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: totalFeedback,\n        positivePercentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 1\n    }, this), !totalFeedback && /*#__PURE__*/_jsxDEV(Notification, {\n      message: \"There is no feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n} // state = {\n//   good: 0,\n//   neutral: 0,\n//   bad: 0\n// }\n// changePoint = e => {\n//   this.setState(prevState => {\n//     const currentName = e.target.name;\n//     return { [currentName]: prevState[currentName] + 1 };\n//   });\n// };\n// countTotalFeedback = () => {\n//   const { good, neutral, bad } = this.state;\n//   return good + neutral + bad;\n// };\n// countPositiveFeedbackPercentage = () => {\n//   const total = this.countTotalFeedback();\n//   return Math.round((this.state.good * 100) / total);\n// };\n// render () {\n//   const { good, neutral, bad } = this.state;\n//   const options = Object.keys(this.state);\n//   const totalFeedback = this.countTotalFeedback();\n// }\n\n_s(App, \"GhhzcNgLub5jZuqdaS9mDSoryuM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx"],"names":["useState","Feedback","Section","Statistics","Notification","App","options","good","setGood","neutral","setNeutral","bad","setBad","prevState","setPrevState","totalFeedback","changePoint","e","currentName","target","name","countPositiveFeedbackPercentage","total","Math","round"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,eAAe,SAASC,GAAT,CAAaC,OAAb,EAAsB;AAAA;;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMe,aAAa,GAAG,MAAM;AACtB,WAAOR,IAAI,GAAGE,OAAP,GAAiBE,GAAxB;AACD,GAFL;;AAKA,QAAMK,WAAW,GAAGC,CAAC,IAAI;AACnBH,IAAAA,YAAY,CAACD,SAAS,IAAI;AACxB,YAAMK,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,IAA7B;AACA,aAAO;AAAE,SAACF,WAAD,GAAeL,SAAS,CAACK,WAAD,CAAT,GAAyB;AAA1C,OAAP;AACH,KAHa,CAAZ;AAGC,GAJP;;AAMF,QAAMG,+BAA+B,GAAG,MAAM;AAC5C,UAAMC,KAAK,GAAGP,aAAa,EAA3B;AACA,WAAOQ,IAAI,CAACC,KAAL,CAAYjB,IAAI,GAAG,GAAR,GAAee,KAA1B,CAAP;AACD,GAHD;;AAME,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACF,QAAC,QAAD;AACI,QAAA,OAAO,EAAEhB,OADb;AAEI,QAAA,eAAe,EAAEU;AAFrB;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,YADF,eAOJ,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,YAAf;AAAA,gBACC,CAAC,CAACD,aAAF,iBACC,QAAC,UAAD;AACE,QAAA,IAAI,EAAER,IADR;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,QAAA,GAAG,EAAEE,GAHP;AAIE,QAAA,KAAK,EAAEI,aAJT;AAKE,QAAA,kBAAkB,EAAEM,+BAA+B;AALrD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YAPI,EAkBH,CAACN,aAAD,iBAAkB,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAlBf;AAAA,kBADF;AAsBD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;GA1EwBV,G;;KAAAA,G","sourcesContent":["// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n\n//   const [prevState, setPrevState] = useState(0);\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n    \n//     }) };\n    \n\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n\n// export default App;\n\nimport { useState } from 'react';\nimport Feedback from  './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\n\nexport default function App(options) {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [prevState, setPrevState] = useState(0);\n   \n  const totalFeedback = () => {\n        return good + neutral + bad;\n      };\n\n  \n  const changePoint = e => {\n        setPrevState(prevState => {\n          const currentName = e.target.name;\n          return { [currentName]: prevState[currentName] + 1 };\n      })};\n\nconst countPositiveFeedbackPercentage = () => {\n  const total = totalFeedback();\n  return Math.round((good * 100) / total);\n};\n\n\n  return (\n    <>\n      <Section title='Please leave feedback'>\n    <Feedback\n        options={options}\n        onLeaveFeedback={changePoint}\n    />\n</Section>\n<Section title='Statistics'>\n{!!totalFeedback && (\n  <Statistics \n    good={good} \n    neutral={neutral} \n    bad={bad} \n    total={totalFeedback}\n    positivePercentage={countPositiveFeedbackPercentage()}\n    />\n)}\n</Section>\n{!totalFeedback && <Notification message=\"There is no feedback\" />}\n    </>\n  )\n}\n\n\n// state = {\n//   good: 0,\n//   neutral: 0,\n//   bad: 0\n// }\n// changePoint = e => {\n//   this.setState(prevState => {\n//     const currentName = e.target.name;\n//     return { [currentName]: prevState[currentName] + 1 };\n//   });\n// };\n// countTotalFeedback = () => {\n//   const { good, neutral, bad } = this.state;\n//   return good + neutral + bad;\n// };\n\n// countPositiveFeedbackPercentage = () => {\n//   const total = this.countTotalFeedback();\n//   return Math.round((this.state.good * 100) / total);\n// };\n\n// render () {\n//   const { good, neutral, bad } = this.state;\n//   const options = Object.keys(this.state);\n//   const totalFeedback = this.countTotalFeedback();\n  \n// }\n"]},"metadata":{},"sourceType":"module"}
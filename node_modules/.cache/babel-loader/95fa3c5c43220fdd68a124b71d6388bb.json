{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx\";\n// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n//     }) };\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n// export default App;\nimport { Component } from 'react';\nimport Feedback from './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.changePoint = e => {\n      this.setState(prevState => {\n        const currentName = e.target.name;\n        return {\n          [currentName]: prevState[currentName] + 1\n        };\n      });\n    };\n\n    this.countTotalFeedback = () => {\n      const {\n        good,\n        neutral,\n        bad\n      } = this.state;\n      return good + neutral + bad;\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      const total = this.countTotalFeedback();\n      return Math.round(this.state.good * 100 / total);\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const options = Object.keys(this.state);\n    const totalFeedback = this.countTotalFeedback();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(Feedback, {\n          options: options,\n          onLeaveFeedback: this.changePoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: !!totalFeedback && /*#__PURE__*/_jsxDEV(Statistics, {\n          good: good,\n          neutral: neutral,\n          bad: bad,\n          total: totalFeedback,\n          positivePercentage: this.countPositiveFeedbackPercentage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 1\n      }, this), !totalFeedback && /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"There is no feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx"],"names":["Component","Feedback","Section","Statistics","Notification","App","state","good","neutral","bad","changePoint","e","setState","prevState","currentName","target","name","countTotalFeedback","countPositiveFeedbackPercentage","total","Math","round","render","options","Object","keys","totalFeedback"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BM,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KADkB;;AAAA,SAM1BC,WAN0B,GAMZC,CAAC,IAAI;AACjB,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACzB,cAAMC,WAAW,GAAGH,CAAC,CAACI,MAAF,CAASC,IAA7B;AACA,eAAO;AAAE,WAACF,WAAD,GAAeD,SAAS,CAACC,WAAD,CAAT,GAAyB;AAA1C,SAAP;AACD,OAHD;AAID,KAXyB;;AAAA,SAY1BG,kBAZ0B,GAYL,MAAM;AACzB,YAAM;AAAEV,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,UAAyB,KAAKH,KAApC;AACA,aAAOC,IAAI,GAAGC,OAAP,GAAiBC,GAAxB;AACD,KAfyB;;AAAA,SAiB1BS,+BAjB0B,GAiBQ,MAAM;AACtC,YAAMC,KAAK,GAAG,KAAKF,kBAAL,EAAd;AACA,aAAOG,IAAI,CAACC,KAAL,CAAY,KAAKf,KAAL,CAAWC,IAAX,GAAkB,GAAnB,GAA0BY,KAArC,CAAP;AACD,KApByB;AAAA;;AAsB1BG,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEf,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAAyB,KAAKH,KAApC;AACA,UAAMiB,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKnB,KAAjB,CAAhB;AACA,UAAMoB,aAAa,GAAG,KAAKT,kBAAL,EAAtB;AACA,wBACE;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,uBAAf;AAAA,+BACF,QAAC,QAAD;AACI,UAAA,OAAO,EAAEM,OADb;AAEI,UAAA,eAAe,EAAE,KAAKb;AAF1B;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,cADF,eAON,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,YAAf;AAAA,kBACC,CAAC,CAACgB,aAAF,iBACG,QAAC,UAAD;AACE,UAAA,IAAI,EAAEnB,IADR;AAEE,UAAA,OAAO,EAAEC,OAFX;AAGE,UAAA,GAAG,EAAEC,GAHP;AAIE,UAAA,KAAK,EAAEiB,aAJT;AAKE,UAAA,kBAAkB,EAAE,KAAKR,+BAAL;AALtB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAPM,EAkBL,CAACQ,aAAD,iBAAkB,QAAC,YAAD;AAAc,QAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAlBb;AAAA,oBADF;AAsBD;;AAhDyB;;AAmD5B,eAAerB,GAAf","sourcesContent":["// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n\n//   const [prevState, setPrevState] = useState(0);\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n    \n//     }) };\n    \n\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n\n// export default App;\n\nimport { Component } from 'react';\nimport Feedback from  './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n  changePoint = e => {\n    this.setState(prevState => {\n      const currentName = e.target.name;\n      return { [currentName]: prevState[currentName] + 1 };\n    });\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    return Math.round((this.state.good * 100) / total);\n  };\n\n  render () {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    const totalFeedback = this.countTotalFeedback();\n    return (\n      <>\n        <Section title='Please leave feedback'>\n      <Feedback\n          options={options}\n          onLeaveFeedback={this.changePoint}\n      />\n</Section>\n<Section title='Statistics'>\n{!!totalFeedback && (\n    <Statistics \n      good={good} \n      neutral={neutral} \n      bad={bad} \n      total={totalFeedback}\n      positivePercentage={this.countPositiveFeedbackPercentage()}\n      />\n)}\n</Section>\n{!totalFeedback && <Notification message=\"There is no feedback\" />}\n      </>\n    )\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}
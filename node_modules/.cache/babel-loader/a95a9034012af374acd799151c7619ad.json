{"ast":null,"code":"import _slicedToArray from\"/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n//     }) };\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n// export default App;\nimport{useState}from'react';import Feedback from'./Feedback/feedback';import Section from'./Section/section';import Statistics from'./Statistics/statistics';import Notification from'./Notification/notification';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),good=_useState2[0],setGood=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),neutral=_useState4[0],setNeutral=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),bad=_useState6[0],setBad=_useState6[1];var options={good:good,neutral:neutral,bad:bad};var leaveGoodFeedback=function leaveGoodFeedback(){setGood(good+1);};var leaveNeutralFeedback=function leaveNeutralFeedback(){setNeutral(neutral+1);};var leaveBadFeedback=function leaveBadFeedback(){setBad(bad+1);};var changePoint=function changePoint(key){if(key==='good'){leaveGoodFeedback();}if(key==='neutral'){leaveNeutralFeedback();}if(key==='bad'){leaveBadFeedback();}};var totalFeedback=function totalFeedback(){return good+neutral+bad;};var countPositiveFeedbackPercentage=function countPositiveFeedbackPercentage(){return totalFeedback()===0?'0':(good/totalFeedback()*100).toFixed(0);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Section,{title:\"Please leave feedback\",children:/*#__PURE__*/_jsx(Feedback,{options:Object.keys(options),onLeaveFeedback:changePoint})}),/*#__PURE__*/_jsx(Section,{title:\"Statistics\",children:!!totalFeedback&&/*#__PURE__*/_jsx(Statistics,{good:good,neutral:neutral,bad:bad,total:totalFeedback(),positivePercentage:countPositiveFeedbackPercentage()})}),!totalFeedback&&/*#__PURE__*/_jsx(Notification,{message:\"There is no feedback\"})]});}// import { useState } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export default function App() {\n// const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const FeedbackType = { good, neutral, bad };\n//   const leaveFeedbackGood = () => {\n//     setGood(good + 1);\n//   };\n//   const leaveFeedbackNeutral = () => {\n//     setNeutral(neutral + 1);\n//   };\n//   const leaveFeedbackBad = () => {\n//     setBad(bad + 1);\n//   };\n//   const leaveFeedback = key => {\n//     if (key === 'good') {\n//       leaveFeedbackGood();\n//     }\n//     if (key === 'neutral') {\n//       leaveFeedbackNeutral();\n//     }\n//     if (key === 'bad') {\n//       leaveFeedbackBad();\n//     }\n//   };\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const countPositiveFeedbackPercentage = () => {\n//     return countTotalFeedback() === 0\n//       ? '0'\n//       : ((good / countTotalFeedback()) * 100).toFixed(0);\n//   };\n//   return (\n//     <div className=\"Feedback\">\n//       <Section title=\"Please, leave feedback\">\n//         <div>\n//           <Feedback\n//             options={Object.keys(FeedbackType)}\n//             onLeaveFeedback={leaveFeedback}\n//           />\n//         </div>\n//       </Section>\n//       <Section title=\"Statistics\">\n//         {countTotalFeedback() ? (\n//           <Statistics\n//             options={FeedbackType}\n//             total={countTotalFeedback()}\n//             positivePercentage={countPositiveFeedbackPercentage()}\n//           />\n//         ) : (\n//           <Notification message=\"There is no feedback\" />\n//         )}\n//       </Section>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx"],"names":["useState","Feedback","Section","Statistics","Notification","App","good","setGood","neutral","setNeutral","bad","setBad","options","leaveGoodFeedback","leaveNeutralFeedback","leaveBadFeedback","changePoint","key","totalFeedback","countPositiveFeedbackPercentage","toFixed","Object","keys"],"mappings":"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","sourcesContent":["// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n\n//   const [prevState, setPrevState] = useState(0);\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n    \n//     }) };\n    \n\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n\n// export default App;\n\n\n\nimport { useState } from 'react';\nimport Feedback from  './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const options = {good, neutral, bad};\n\n  const leaveGoodFeedback = () => {\n    setGood(good + 1);\n  }\n  const leaveNeutralFeedback = () => {\n    setNeutral(neutral + 1);\n  }\n  const leaveBadFeedback = () => {\n    setBad(bad + 1);\n  }\n\n  const changePoint = key => {\n    if (key === 'good') {\n      leaveGoodFeedback();\n    }\n    if (key === 'neutral') {\n      leaveNeutralFeedback();\n    }\n    if (key === 'bad') {\n      leaveBadFeedback();\n    }\n      };\n\n  const totalFeedback = () => {\n        return good + neutral + bad;\n      };\n\n  const countPositiveFeedbackPercentage = () => {\n       return totalFeedback() === 0\n          ? '0'\n          : ((good / totalFeedback()) * 100).toFixed(0);\n      };\n\n  return (\n    <>\n      <Section title='Please leave feedback'>\n    <Feedback\n        options={Object.keys(options)}\n        onLeaveFeedback={changePoint}\n    />\n</Section>\n<Section title='Statistics'>\n{!!totalFeedback && (\n  <Statistics \n      good={good} \n      neutral={neutral} \n      bad={bad} \n    total={totalFeedback()}\n    positivePercentage={countPositiveFeedbackPercentage()}\n    />\n)}\n</Section>\n{!totalFeedback && <Notification message=\"There is no feedback\" />}\n    </>\n  )\n}\n\n// import { useState } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export default function App() {\n\n// const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const FeedbackType = { good, neutral, bad };\n\n//   const leaveFeedbackGood = () => {\n//     setGood(good + 1);\n//   };\n//   const leaveFeedbackNeutral = () => {\n//     setNeutral(neutral + 1);\n//   };\n//   const leaveFeedbackBad = () => {\n//     setBad(bad + 1);\n//   };\n\n//   const leaveFeedback = key => {\n//     if (key === 'good') {\n//       leaveFeedbackGood();\n//     }\n//     if (key === 'neutral') {\n//       leaveFeedbackNeutral();\n//     }\n//     if (key === 'bad') {\n//       leaveFeedbackBad();\n//     }\n//   };\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const countPositiveFeedbackPercentage = () => {\n//     return countTotalFeedback() === 0\n//       ? '0'\n//       : ((good / countTotalFeedback()) * 100).toFixed(0);\n//   };\n\n//   return (\n//     <div className=\"Feedback\">\n//       <Section title=\"Please, leave feedback\">\n//         <div>\n//           <Feedback\n//             options={Object.keys(FeedbackType)}\n//             onLeaveFeedback={leaveFeedback}\n//           />\n//         </div>\n//       </Section>\n//       <Section title=\"Statistics\">\n//         {countTotalFeedback() ? (\n//           <Statistics\n//             options={FeedbackType}\n//             total={countTotalFeedback()}\n//             positivePercentage={countPositiveFeedbackPercentage()}\n//           />\n//         ) : (\n//           <Notification message=\"There is no feedback\" />\n//         )}\n//       </Section>\n//     </div>\n//   );\n// }\n\n"]},"metadata":{},"sourceType":"module"}
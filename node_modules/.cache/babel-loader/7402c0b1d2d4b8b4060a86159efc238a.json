{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\n// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n//     }) };\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n// export default App;\n// import { useState } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export default function App(options) {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n//   const totalFeedback = () => {\n//         return good + neutral + bad;\n//       };\n//   const changePoint = e => {\n//         setPrevState(prevState => {\n//           const currentName = e.target.name;\n//           return { [currentName]: prevState[currentName] + 1 };\n//       })};\n// const countPositiveFeedbackPercentage = () => {\n//   const total = totalFeedback();\n//   return Math.round((good * 100) / total);\n// };\n//   return (\n//     <>\n//       <Section title='Please leave feedback'>\n//     <Feedback\n//         options={options}\n//         onLeaveFeedback={changePoint}\n//     />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//   <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )}\n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" />}\n//     </>\n//   )\n// }\nimport { useState } from 'react';\nimport Feedback from './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const FeedbacType = {\n    good,\n    neutral,\n    bad\n  }; // console.log(FeedbacType);\n\n  const leaveFeedbackGood = () => {\n    setGood(good + 1); // console.log(good + 1);\n  };\n\n  const leaveFeedbackNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const leaveFeedbackBad = () => {\n    setBad(bad + 1);\n  };\n\n  const leaveFeedback = key => {\n    if (key === 'good') {\n      leaveFeedbackGood();\n    }\n\n    if (key === 'neutral') {\n      leaveFeedbackNeutral();\n    }\n\n    if (key === 'bad') {\n      leaveFeedbackBad();\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad; // Object.values(options).reduce((total, value) => value + total, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return countTotalFeedback() === 0 ? '0' : (good / countTotalFeedback() * 100).toFixed(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Feedback\",\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please, leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Feedback, {\n          options: Object.keys(FeedbacType),\n          onLeaveFeedback: leaveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: countTotalFeedback() ? /*#__PURE__*/_jsxDEV(Statistics, {\n        options: FeedbacType,\n        total: countTotalFeedback(),\n        positivePercentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"There is no feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n} // state = {\n//   good: 0,\n//   neutral: 0,\n//   bad: 0\n// }\n// changePoint = e => {\n//   this.setState(prevState => {\n//     const currentName = e.target.name;\n//     return { [currentName]: prevState[currentName] + 1 };\n//   });\n// };\n// countTotalFeedback = () => {\n//   const { good, neutral, bad } = this.state;\n//   return good + neutral + bad;\n// };\n// countPositiveFeedbackPercentage = () => {\n//   const total = this.countTotalFeedback();\n//   return Math.round((this.state.good * 100) / total);\n// };\n// render () {\n//   const { good, neutral, bad } = this.state;\n//   const options = Object.keys(this.state);\n//   const totalFeedback = this.countTotalFeedback();\n// }\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx"],"names":["useState","Feedback","Section","Statistics","Notification","App","good","setGood","neutral","setNeutral","bad","setBad","FeedbacType","leaveFeedbackGood","leaveFeedbackNeutral","leaveFeedbackBad","leaveFeedback","key","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","Object","keys"],"mappings":"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","sourcesContent":["// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n\n//   const [prevState, setPrevState] = useState(0);\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n    \n//     }) };\n    \n\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n\n// export default App;\n\n\n\n// import { useState } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export default function App(options) {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n   \n//   const totalFeedback = () => {\n//         return good + neutral + bad;\n//       };\n\n  \n//   const changePoint = e => {\n//         setPrevState(prevState => {\n//           const currentName = e.target.name;\n//           return { [currentName]: prevState[currentName] + 1 };\n//       })};\n\n// const countPositiveFeedbackPercentage = () => {\n//   const total = totalFeedback();\n//   return Math.round((good * 100) / total);\n// };\n\n\n//   return (\n//     <>\n//       <Section title='Please leave feedback'>\n//     <Feedback\n//         options={options}\n//         onLeaveFeedback={changePoint}\n//     />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//   <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )}\n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" />}\n//     </>\n//   )\n// }\nimport { useState } from 'react';\nimport Feedback from  './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\n\nexport default function App() {\n\nconst [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const FeedbacType = { good, neutral, bad };\n  // console.log(FeedbacType);\n\n  const leaveFeedbackGood = () => {\n    setGood(good + 1);\n    // console.log(good + 1);\n  };\n  const leaveFeedbackNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n  const leaveFeedbackBad = () => {\n    setBad(bad + 1);\n  };\n\n  const leaveFeedback = key => {\n    if (key === 'good') {\n      leaveFeedbackGood();\n    }\n    if (key === 'neutral') {\n      leaveFeedbackNeutral();\n    }\n    if (key === 'bad') {\n      leaveFeedbackBad();\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n    // Object.values(options).reduce((total, value) => value + total, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return countTotalFeedback() === 0\n      ? '0'\n      : ((good / countTotalFeedback()) * 100).toFixed(0);\n  };\n\n  return (\n    <div className=\"Feedback\">\n      <Section title=\"Please, leave feedback\">\n        <div>\n          <Feedback\n            options={Object.keys(FeedbacType)}\n            onLeaveFeedback={leaveFeedback}\n          />\n        </div>\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() ? (\n          <Statistics\n            options={FeedbacType}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"There is no feedback\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n\n// state = {\n//   good: 0,\n//   neutral: 0,\n//   bad: 0\n// }\n// changePoint = e => {\n//   this.setState(prevState => {\n//     const currentName = e.target.name;\n//     return { [currentName]: prevState[currentName] + 1 };\n//   });\n// };\n// countTotalFeedback = () => {\n//   const { good, neutral, bad } = this.state;\n//   return good + neutral + bad;\n// };\n\n// countPositiveFeedbackPercentage = () => {\n//   const total = this.countTotalFeedback();\n//   return Math.round((this.state.good * 100) / total);\n// };\n\n// render () {\n//   const { good, neutral, bad } = this.state;\n//   const options = Object.keys(this.state);\n//   const totalFeedback = this.countTotalFeedback();\n  \n// }\n"]},"metadata":{},"sourceType":"module"}
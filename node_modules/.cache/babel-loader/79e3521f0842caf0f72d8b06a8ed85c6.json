{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Feedback from './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [prevState, setPrevState] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const changePoint = e => {\n    setPrevState(prevState => {\n      const currentName = e.target.name;\n      return {\n        [currentName]: prevState[currentName] + 1\n      };\n    });\n  }; // changePoint = e => {\n  //   this.setState(prevState => {\n  //     const currentName = e.target.name;\n  //     return { [currentName]: prevState[currentName] + 1 };\n  //   });\n  // };\n  // const countPositiveFeedbackPercentage = () => {\n  //   const total = countTotalFeedback();\n  //   return Math.round((good * 100) / total);\n  // };\n  // const options = Object.keys(state);\n  // const totalFeedback = this.countTotalFeedback();\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(Feedback // options={options}\n      // onLeaveFeedback={this.changePoint}\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"GhhzcNgLub5jZuqdaS9mDSoryuM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx"],"names":["useState","useEffect","Feedback","Section","Statistics","Notification","App","good","setGood","neutral","setNeutral","bad","setBad","prevState","setPrevState","countTotalFeedback","changePoint","e","currentName","target","name"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,OAAO,SAASC,GAAT,GAAe;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,CAAD,CAA9B;AAEA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMe,kBAAkB,GAAG,MAAM;AAC/B,WAAOR,IAAI,GAAGE,OAAP,GAAiBE,GAAxB;AACD,GAFD;;AAIA,QAAMK,WAAW,GAAGC,CAAC,IAAI;AACvBH,IAAAA,YAAY,CAACD,SAAS,IAAI;AACxB,YAAMK,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,IAA7B;AACA,aAAO;AAAE,SAACF,WAAD,GAAeL,SAAS,CAACK,WAAD,CAAT,GAAyB;AAA1C,OAAP;AAED,KAJW,CAAZ;AAII,GALN,CAXoB,CAmBpB;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGE;AACA;;;AACA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACF,QAAC,QAAD,CACI;AACA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,YADF,eAON,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAPM;AAAA,kBADF;AAsBD;;GA1DaZ,G;;KAAAA,G;AA4DhB,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport Feedback from  './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\n\nexport function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const [prevState, setPrevState] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const changePoint = e => {\n    setPrevState(prevState => {\n      const currentName = e.target.name;\n      return { [currentName]: prevState[currentName] + 1 };\n    \n    }) }\n    \n\n  // changePoint = e => {\n  //   this.setState(prevState => {\n  //     const currentName = e.target.name;\n  //     return { [currentName]: prevState[currentName] + 1 };\n  //   });\n  // };\n\n  \n\n  // const countPositiveFeedbackPercentage = () => {\n  //   const total = countTotalFeedback();\n  //   return Math.round((good * 100) / total);\n  // };\n\n  \n    // const options = Object.keys(state);\n    // const totalFeedback = this.countTotalFeedback();\n    return (\n      <>\n        <Section title='Please leave feedback'>\n      <Feedback\n          // options={options}\n          // onLeaveFeedback={this.changePoint}\n      />\n</Section>\n<Section title='Statistics'>\n{/* {!!totalFeedback && (\n    <Statistics \n      good={good} \n      neutral={neutral} \n      bad={bad} \n      total={totalFeedback}\n      positivePercentage={this.countPositiveFeedbackPercentage()}\n      />\n)} */}\n</Section>\n{/* {!totalFeedback && <Notification message=\"There is no feedback\" />} */}\n      </>\n    )\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
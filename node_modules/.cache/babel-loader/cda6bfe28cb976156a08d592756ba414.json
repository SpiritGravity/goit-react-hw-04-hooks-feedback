{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\n// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const [prevState, setPrevState] = useState(0);\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n//     }) };\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n// export default App;\nimport { useState } from 'react';\nimport Feedback from './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const options = {\n    good,\n    neutral,\n    bad\n  };\n\n  const leaveGoodFeedback = () => {\n    setGood(good + 1);\n  };\n\n  const leaveNeutralFeedback = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const leaveBadFeedback = () => {\n    setBad(bad + 1);\n  };\n\n  const changePoint = key => {\n    if (key === 'good') {\n      leaveGoodFeedback();\n    }\n\n    if (key === 'neutral') {\n      leaveNeutralFeedback();\n    }\n\n    if (key === 'bad') {\n      leaveBadFeedback();\n    }\n  };\n\n  const totalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(good / totalFeedback * 100);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(Feedback, {\n        options: Object.keys(options),\n        onLeaveFeedback: changePoint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: !!totalFeedback && /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: totalFeedback(),\n        positivePercentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 1\n    }, this), !totalFeedback && /*#__PURE__*/_jsxDEV(Notification, {\n      message: \"There is no feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n} // import { useState } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n// export default function App() {\n// const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const FeedbackType = { good, neutral, bad };\n//   const leaveFeedbackGood = () => {\n//     setGood(good + 1);\n//   };\n//   const leaveFeedbackNeutral = () => {\n//     setNeutral(neutral + 1);\n//   };\n//   const leaveFeedbackBad = () => {\n//     setBad(bad + 1);\n//   };\n//   const leaveFeedback = key => {\n//     if (key === 'good') {\n//       leaveFeedbackGood();\n//     }\n//     if (key === 'neutral') {\n//       leaveFeedbackNeutral();\n//     }\n//     if (key === 'bad') {\n//       leaveFeedbackBad();\n//     }\n//   };\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n//   const countPositiveFeedbackPercentage = () => {\n//     return countTotalFeedback() === 0\n//       ? '0'\n//       : ((good / countTotalFeedback()) * 100).toFixed(0);\n//   };\n//   return (\n//     <div className=\"Feedback\">\n//       <Section title=\"Please, leave feedback\">\n//         <div>\n//           <Feedback\n//             options={Object.keys(FeedbackType)}\n//             onLeaveFeedback={leaveFeedback}\n//           />\n//         </div>\n//       </Section>\n//       <Section title=\"Statistics\">\n//         {countTotalFeedback() ? (\n//           <Statistics\n//             options={FeedbackType}\n//             total={countTotalFeedback()}\n//             positivePercentage={countPositiveFeedbackPercentage()}\n//           />\n//         ) : (\n//           <Notification message=\"There is no feedback\" />\n//         )}\n//       </Section>\n//     </div>\n//   );\n// }\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-feedback/src/components/App.jsx"],"names":["useState","Feedback","Section","Statistics","Notification","App","good","setGood","neutral","setNeutral","bad","setBad","options","leaveGoodFeedback","leaveNeutralFeedback","leaveBadFeedback","changePoint","key","totalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAMY,OAAO,GAAG;AAACN,IAAAA,IAAD;AAAOE,IAAAA,OAAP;AAAgBE,IAAAA;AAAhB,GAAhB;;AAEA,QAAMG,iBAAiB,GAAG,MAAM;AAC9BN,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,GAFD;;AAGA,QAAMQ,oBAAoB,GAAG,MAAM;AACjCL,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,GAFD;;AAGA,QAAMO,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;AACD,GAFD;;AAIA,QAAMM,WAAW,GAAGC,GAAG,IAAI;AAC7B,QAAIA,GAAG,KAAK,MAAZ,EAAoB;AAClBJ,MAAAA,iBAAiB;AAClB;;AACD,QAAII,GAAG,KAAK,SAAZ,EAAuB;AACrBH,MAAAA,oBAAoB;AACrB;;AACD,QAAIG,GAAG,KAAK,KAAZ,EAAmB;AACjBF,MAAAA,gBAAgB;AACjB;AACE,GAVD;;AAYA,QAAMG,aAAa,GAAG,MAAM;AACtB,WAAOZ,IAAI,GAAGE,OAAP,GAAiBE,GAAxB;AACD,GAFL;;AAII,QAAMS,+BAA+B,GAAG,MAAM;AAC5C,WAAOC,IAAI,CAACC,KAAL,CAAYf,IAAI,GAAGY,aAAR,GAAyB,GAApC,CAAP;AACD,GAFD;;AAIJ,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACF,QAAC,QAAD;AACI,QAAA,OAAO,EAAEI,MAAM,CAACC,IAAP,CAAYX,OAAZ,CADb;AAEI,QAAA,eAAe,EAAEI;AAFrB;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,YADF,eAOJ,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,YAAf;AAAA,gBACC,CAAC,CAACE,aAAF,iBACC,QAAC,UAAD;AACI,QAAA,IAAI,EAAEZ,IADV;AAEI,QAAA,OAAO,EAAEE,OAFb;AAGI,QAAA,GAAG,EAAEE,GAHT;AAIE,QAAA,KAAK,EAAEQ,aAAa,EAJtB;AAKE,QAAA,kBAAkB,EAAEC,+BAA+B;AALrD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YAPI,EAkBH,CAACD,aAAD,iBAAkB,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAlBf;AAAA,kBADF;AAsBD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAhIwBb,G;;KAAAA,G","sourcesContent":["// import { useState, useEffect } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n\n//   const [prevState, setPrevState] = useState(0);\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const changePoint = e => {\n//     setPrevState(prevState => {\n//       const currentName = e.target.name;\n//       return { [currentName]: prevState[currentName] + 1 };\n    \n//     }) };\n    \n\n//   const countPositiveFeedbackPercentage = () => {\n//     const total = countTotalFeedback();\n//     return Math.round((good * 100) / total);\n//   };\n\n//   const options = { good, neutral, bad };\n//   const totalFeedback = countTotalFeedback();\n//     return (\n//       <>\n//         <Section title='Please leave feedback'>\n//       <Feedback\n//           options={options}\n//           onLeaveFeedback={changePoint}\n//       />\n// </Section>\n// <Section title='Statistics'>\n// {!!totalFeedback && (\n//     <Statistics \n//     good={good} \n//     neutral={neutral} \n//     bad={bad} \n//     total={totalFeedback}\n//     positivePercentage={countPositiveFeedbackPercentage()}\n//     />\n// )} \n// </Section>\n// {!totalFeedback && <Notification message=\"There is no feedback\" /> }\n//       </>\n//     )\n//   }\n\n// export default App;\n\n\n\nimport { useState } from 'react';\nimport Feedback from  './Feedback/feedback';\nimport Section from './Section/section';\nimport Statistics from './Statistics/statistics';\nimport Notification from './Notification/notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const options = {good, neutral, bad};\n\n  const leaveGoodFeedback = () => {\n    setGood(good + 1);\n  }\n  const leaveNeutralFeedback = () => {\n    setNeutral(neutral + 1);\n  }\n  const leaveBadFeedback = () => {\n    setBad(bad + 1);\n  }\n\n  const changePoint = key => {\nif (key === 'good') {\n  leaveGoodFeedback();\n}\nif (key === 'neutral') {\n  leaveNeutralFeedback();\n}\nif (key === 'bad') {\n  leaveBadFeedback();\n}\n  };\n\n  const totalFeedback = () => {\n        return good + neutral + bad;\n      };\n\n      const countPositiveFeedbackPercentage = () => {\n        return Math.round((good / totalFeedback) * 100)\n      };\n      \n  return (\n    <>\n      <Section title='Please leave feedback'>\n    <Feedback\n        options={Object.keys(options)}\n        onLeaveFeedback={changePoint}\n    />\n</Section>\n<Section title='Statistics'>\n{!!totalFeedback && (\n  <Statistics \n      good={good} \n      neutral={neutral} \n      bad={bad} \n    total={totalFeedback()}\n    positivePercentage={countPositiveFeedbackPercentage()}\n    />\n)}\n</Section>\n{!totalFeedback && <Notification message=\"There is no feedback\" />}\n    </>\n  )\n}\n\n// import { useState } from 'react';\n// import Feedback from  './Feedback/feedback';\n// import Section from './Section/section';\n// import Statistics from './Statistics/statistics';\n// import Notification from './Notification/notification';\n\n// export default function App() {\n\n// const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n//   const FeedbackType = { good, neutral, bad };\n\n//   const leaveFeedbackGood = () => {\n//     setGood(good + 1);\n//   };\n//   const leaveFeedbackNeutral = () => {\n//     setNeutral(neutral + 1);\n//   };\n//   const leaveFeedbackBad = () => {\n//     setBad(bad + 1);\n//   };\n\n//   const leaveFeedback = key => {\n//     if (key === 'good') {\n//       leaveFeedbackGood();\n//     }\n//     if (key === 'neutral') {\n//       leaveFeedbackNeutral();\n//     }\n//     if (key === 'bad') {\n//       leaveFeedbackBad();\n//     }\n//   };\n\n//   const countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   const countPositiveFeedbackPercentage = () => {\n//     return countTotalFeedback() === 0\n//       ? '0'\n//       : ((good / countTotalFeedback()) * 100).toFixed(0);\n//   };\n\n//   return (\n//     <div className=\"Feedback\">\n//       <Section title=\"Please, leave feedback\">\n//         <div>\n//           <Feedback\n//             options={Object.keys(FeedbackType)}\n//             onLeaveFeedback={leaveFeedback}\n//           />\n//         </div>\n//       </Section>\n//       <Section title=\"Statistics\">\n//         {countTotalFeedback() ? (\n//           <Statistics\n//             options={FeedbackType}\n//             total={countTotalFeedback()}\n//             positivePercentage={countPositiveFeedbackPercentage()}\n//           />\n//         ) : (\n//           <Notification message=\"There is no feedback\" />\n//         )}\n//       </Section>\n//     </div>\n//   );\n// }\n\n"]},"metadata":{},"sourceType":"module"}